From 5c6f5b265b09cf84248b2d283b49504342d328ca Mon Sep 17 00:00:00 2001
From: kaidoho <kho237115@gmail.com>
Date: Fri, 27 Dec 2019 17:14:07 -0500
Subject: [PATCH] Add support for Zephyr OS

---
 INSTALL/configure.html      |   3 +
 config.sub                  |   2 +-
 config/gthr.m4              |   1 +
 configure                   |   6 +
 configure.ac                |   6 +
 gcc/config.gcc              |  42 +++++-
 gcc/config/arm/t-zephyr     |  38 ++++++
 gcc/config/arm/zephyr.h     |  36 ++++++
 gcc/config/t-zephyr         |   2 +
 gcc/config/zephyr.h         |  51 ++++++++
 gcc/config/zephyr.opt       |  30 +++++
 gcc/configure               |   2 +-
 gcc/configure.ac            |   2 +-
 gcc/doc/gccinstall.info     |   2 +
 libatomic/configure.tgt     |   5 +
 libgcc/config.host          |  24 +++-
 libgcc/config/gthr-zephyr.h | 246 ++++++++++++++++++++++++++++++++++++
 libgcc/config/t-zephyr      |   4 +
 libgcc/configure            |   1 +
 libstdc++-v3/acinclude.m4   |   3 +
 libstdc++-v3/configure      |  46 +++++++
 libstdc++-v3/configure.host |   4 +
 libstdc++-v3/crossconfig.m4 |  22 ++++
 23 files changed, 566 insertions(+), 12 deletions(-)
 create mode 100644 gcc/config/arm/t-zephyr
 create mode 100644 gcc/config/arm/zephyr.h
 create mode 100644 gcc/config/t-zephyr
 create mode 100644 gcc/config/zephyr.h
 create mode 100644 gcc/config/zephyr.opt
 create mode 100644 libgcc/config/gthr-zephyr.h
 create mode 100644 libgcc/config/t-zephyr

diff --git a/INSTALL/configure.html b/INSTALL/configure.html
index 9c2892215..84fe63ffe 100644
--- a/INSTALL/configure.html
+++ b/INSTALL/configure.html
@@ -807,6 +807,9 @@ like C++.  The possibilities for <var>lib</var> are:
 <dt><code>win32</code></dt>
 <dd><p>Microsoft Win32 API thread support.
 </p></dd>
+<dt><code>zephyr</code></dt>
+<dd><p>Zephyr thread support.
+</p></dd>
 </dl>
 
 </dd>
diff --git a/config.sub b/config.sub
index 75bb6a313..02cd271b7 100755
--- a/config.sub
+++ b/config.sub
@@ -1351,7 +1351,7 @@ case $os in
 	     | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \
 	     | udi* | eabi* | lites* | ieee* | go32* | aux* | hcos* \
 	     | chorusrdb* | cegcc* | glidix* \
-	     | cygwin* | msys* | pe* | moss* | proelf* | rtems* \
+	     | cygwin* | msys* | pe* | moss* | proelf* | zephyr* | rtems* \
 	     | midipix* | mingw32* | mingw64* | linux-gnu* | linux-android* \
 	     | linux-newlib* | linux-musl* | linux-uclibc* \
 	     | uxpv* | beos* | mpeix* | udk* | moxiebox* \
diff --git a/config/gthr.m4 b/config/gthr.m4
index 7b29f1f33..4bf164468 100644
--- a/config/gthr.m4
+++ b/config/gthr.m4
@@ -17,6 +17,7 @@ case $1 in
     mipssde)	thread_header=config/mips/gthr-mipssde.h ;;
     posix)	thread_header=gthr-posix.h ;;
     rtems)	thread_header=config/gthr-rtems.h ;;
+    zephyr)	thread_header=config/gthr-zephyr.h ;;
     single)	thread_header=gthr-single.h ;;
     tpf)	thread_header=config/s390/gthr-tpf.h ;;
     vxworks)	thread_header=config/gthr-vxworks.h ;;
diff --git a/configure b/configure
index abd93a990..13d4e7cd0 100755
--- a/configure
+++ b/configure
@@ -3451,6 +3451,9 @@ case "${target}" in
   *-*-rtems*)
     noconfigdirs="$noconfigdirs target-libffi"
     ;;
+  *-*-zephyr*)
+    noconfigdirs="$noconfigdirs target-libffi"
+    ;;
   *-*-tpf*)
     noconfigdirs="$noconfigdirs target-libffi"
     ;;
@@ -3697,6 +3700,9 @@ case "${target}" in
   *-*-rtems*)
     noconfigdirs="$noconfigdirs target-libgloss"
     ;;
+  *-*-zephyr*)
+    noconfigdirs="$noconfigdirs target-libgloss"
+    ;;
     # The tpf target doesn't support gdb yet.
   *-*-tpf*)
     noconfigdirs="$noconfigdirs gdb tcl tk libgui itcl"
diff --git a/configure.ac b/configure.ac
index 9db4fd14a..fdaac6a55 100644
--- a/configure.ac
+++ b/configure.ac
@@ -733,6 +733,9 @@ case "${target}" in
   *-*-rtems*)
     noconfigdirs="$noconfigdirs target-libffi"
     ;;
+  *-*-zephyr*)
+    noconfigdirs="$noconfigdirs target-libffi"
+    ;;
   *-*-tpf*)
     noconfigdirs="$noconfigdirs target-libffi"
     ;;
@@ -979,6 +982,9 @@ case "${target}" in
   *-*-rtems*)
     noconfigdirs="$noconfigdirs target-libgloss"
     ;;
+  *-*-zephyr*)
+    noconfigdirs="$noconfigdirs target-libgloss"
+    ;;
     # The tpf target doesn't support gdb yet.
   *-*-tpf*)
     noconfigdirs="$noconfigdirs gdb tcl tk libgui itcl"
diff --git a/gcc/config.gcc b/gcc/config.gcc
index ddd3b8f4d..880a8b5f7 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -884,6 +884,20 @@ case ${target} in
   default_use_cxa_atexit=yes
   use_gcc_stdint=wrap
   ;;
+*-*-zephyr*)
+  case ${enable_threads} in
+    "" | yes | zephyr ) thread_file='zephyr' ;;
+    no) ;;
+    *)
+      echo 'Unknown thread configuration for Zephyr'
+      exit 1
+      ;;
+  esac
+  tmake_file="${tmake_file} t-zephyr"
+  extra_options="${extra_options} zephyr.opt"
+  default_use_cxa_atexit=yes
+  use_gcc_stdint=wrap
+  ;;
 *-*-uclinux*)
   extra_options="$extra_options gnu-user.opt"
   use_gcc_stdint=wrap
@@ -978,7 +992,7 @@ case ${target} in
 esac
 
 case ${target} in
-aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems*)
+aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems* | aarch64*-*-zephyr*)
 	tm_file="${tm_file} dbxelf.h elfos.h newlib-stdint.h"
 	tm_file="${tm_file} aarch64/aarch64-elf.h aarch64/aarch64-elf-raw.h"
 	tmake_file="${tmake_file} aarch64/t-aarch64"
@@ -992,6 +1006,9 @@ aarch64*-*-elf | aarch64*-*-fuchsia* | aarch64*-*-rtems*)
 	aarch64-*-rtems*)
 	  	tm_file="${tm_file} rtems.h aarch64/rtems.h"
 		;;
+	aarch64-*-zephyr*)
+	  	tm_file="${tm_file} zephyr.h aarch64/zephyr.h"
+		;;
 	esac
 	case $target in
 	aarch64_be-*)
@@ -1208,7 +1225,7 @@ arm*-*-phoenix*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-bpabi arm/t-phoenix"
 	target_cpu_cname="arm7tdmi"
 	;;
-arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
+arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-zephyr* | arm*-*-rtems* | arm*-*-fuchsia*)
 	case ${target} in
 	arm*eb-*-eabi*)
 	  tm_defines="${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1"
@@ -1232,6 +1249,10 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
 	  tm_file="${tm_file} rtems.h arm/rtems.h newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi arm/t-rtems"
 	  ;;
+	arm*-*-zephyr*)
+	  tm_file="${tm_file} zephyr.h arm/zephyr.h newlib-stdint.h"
+	  tmake_file="${tmake_file} arm/t-bpabi arm/t-zephyr"
+	  ;;
 	arm*-*-symbianelf*)
 	  tm_file="${tm_file} arm/symbian.h"
 	  # We do not include t-bpabi for Symbian OS because the system
@@ -1641,6 +1662,9 @@ x86_64-*-elf*)
 x86_64-*-rtems*)
 	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h i386/rtemself.h rtems.h"
 	;;
+x86_64-*-zephyr*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/x86-64.h i386/zephyrelf.h zephyr.h"
+	;;
 i[34567]86-*-rdos*)
     tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h i386/rdos.h"
     ;;
@@ -1808,6 +1832,10 @@ i[34567]86-*-rtems*)
 	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/rtemself.h rtems.h newlib-stdint.h"
 	tmake_file="${tmake_file} i386/t-rtems"
 	;;
+i[34567]86-*-zephyr*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/zephyrelf.h zephyr.h newlib-stdint.h"
+	tmake_file="${tmake_file} i386/t-zephyr"
+	;;
 i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)
 	# Set default arch_32 to pentium4, tune_32 to generic like the other
 	# i386 targets, although config.guess defaults to i386-pc-solaris2*.
@@ -2213,13 +2241,17 @@ riscv*-*-linux*)
 	# automatically detect that GAS supports it, yet we require it.
 	gcc_cv_initfini_array=yes
 	;;
-riscv*-*-elf* | riscv*-*-rtems*)
+riscv*-*-elf* | riscv*-*-zephyr* | riscv*-*-rtems*)
 	tm_file="elfos.h newlib-stdint.h ${tm_file} riscv/elf.h"
 	case ${target} in
 	*-*-rtems*)
 	  tm_file="${tm_file} rtems.h riscv/rtems.h"
 	  tmake_file="${tmake_file} riscv/t-rtems"
 	  ;;
+	*-*-zephyr*)
+	  tm_file="${tm_file} zephyr.h riscv/zephyr.h"
+	  tmake_file="${tmake_file} riscv/t-zephyr"
+	  ;;
 	*)
 	  case "x${enable_multilib}" in
 	  xno) ;;
@@ -2524,6 +2556,10 @@ nios2-*-*)
 		tm_file="${tm_file} newlib-stdint.h nios2/rtems.h rtems.h"
 		tmake_file="${tmake_file} t-rtems nios2/t-rtems"
 		;;
+	nios2-*-zephyr*)
+		tm_file="${tm_file} newlib-stdint.h nios2/zephyr.h zephyr.h"
+		tmake_file="${tmake_file} t-zephyr nios2/t-zephyr"
+		;;
         esac
 	;;
 nvptx-*)
diff --git a/gcc/config/arm/t-zephyr b/gcc/config/arm/t-zephyr
new file mode 100644
index 000000000..65f1641c6
--- /dev/null
+++ b/gcc/config/arm/t-zephyr
@@ -0,0 +1,38 @@
+# Custom Zephyr multilibs for ARM
+
+# Reset all MULTILIB variables
+
+MULTILIB_OPTIONS	=
+MULTILIB_DIRNAMES	=
+MULTILIB_EXCEPTIONS	=
+MULTILIB_REUSE		=
+MULTILIB_MATCHES	=
+MULTILIB_REQUIRED	=
+
+# Enumeration of multilibs
+
+MULTILIB_OPTIONS	+= mbig-endian
+MULTILIB_DIRNAMES	+= eb
+
+MULTILIB_OPTIONS	+= mthumb
+MULTILIB_DIRNAMES	+= thumb
+
+MULTILIB_OPTIONS	+= march=armv5te+fp/march=armv6-m/march=armv7-a/march=armv7-a+simd/march=armv7-r/march=armv7-r+fp/mcpu=cortex-m3/mcpu=cortex-m4/mcpu=cortex-m4+nofp/mcpu=cortex-m7
+MULTILIB_DIRNAMES	+= armv5te+fp       armv6-m       armv7-a       armv7-a+simd       armv7-r       armv7-r+fp       cortex-m3      cortex-m4      cortex-m4+nofp      cortex-m7
+
+MULTILIB_OPTIONS	+= mfloat-abi=hard
+MULTILIB_DIRNAMES	+= hard
+
+MULTILIB_REQUIRED	+= mbig-endian/mthumb/march=armv7-r+fp/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mbig-endian/mthumb/march=armv7-r
+MULTILIB_REQUIRED	+= march=armv5te+fp/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mthumb/march=armv6-m
+MULTILIB_REQUIRED	+= mthumb/march=armv7-a+simd/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mthumb/march=armv7-a
+MULTILIB_REQUIRED	+= mthumb/march=armv7-r+fp/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mthumb/march=armv7-r
+MULTILIB_REQUIRED	+= mthumb/mcpu=cortex-m3
+MULTILIB_REQUIRED	+= mthumb/mcpu=cortex-m4/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mthumb/mcpu=cortex-m4+nofp
+MULTILIB_REQUIRED	+= mthumb/mcpu=cortex-m7/mfloat-abi=hard
+MULTILIB_REQUIRED	+= mthumb
diff --git a/gcc/config/arm/zephyr.h b/gcc/config/arm/zephyr.h
new file mode 100644
index 000000000..69c9407ce
--- /dev/null
+++ b/gcc/config/arm/zephyr.h
@@ -0,0 +1,36 @@
+/* Definitions for Zephyr based ARM systems using EABI.
+   Copyright (C) 2011-2019 Free Software Foundation, Inc.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   Under Section 7 of GPL version 3, you are granted additional
+   permissions described in the GCC Runtime Library Exception, version
+   3.1, as published by the Free Software Foundation.
+
+   You should have received a copy of the GNU General Public License and
+   a copy of the GCC Runtime Library Exception along with this program;
+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#define HAS_INIT_SECTION
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()		\
+    do {					\
+	builtin_define ("__zephyr__");		\
+	builtin_define ("__USE_INIT_FINI__");	\
+	builtin_assert ("system=zephyr");	\
+	TARGET_BPABI_CPP_BUILTINS();    	\
+    } while (0)
+
+#define ARM_DEFAULT_SHORT_ENUMS false
diff --git a/gcc/config/t-zephyr b/gcc/config/t-zephyr
new file mode 100644
index 000000000..0b9ce674e
--- /dev/null
+++ b/gcc/config/t-zephyr
@@ -0,0 +1,2 @@
+# Zephyr always has limits.h.
+LIMITS_H_TEST = true
diff --git a/gcc/config/zephyr.h b/gcc/config/zephyr.h
new file mode 100644
index 000000000..df705fc36
--- /dev/null
+++ b/gcc/config/zephyr.h
@@ -0,0 +1,51 @@
+/* Configuration common to all targets running Zephyr. 
+   Copyright (C) 2000-2019 Free Software Foundation, Inc.
+
+   This file is part of GCC.
+
+   GCC is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published
+   by the Free Software Foundation; either version 3, or (at your
+   option) any later version.
+
+   GCC is distributed in the hope that it will be useful, but WITHOUT
+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
+   License for more details.
+
+   Under Section 7 of GPL version 3, you are granted additional
+   permissions described in the GCC Runtime Library Exception, version
+   3.1, as published by the Free Software Foundation.
+
+   You should have received a copy of the GNU General Public License and
+   a copy of the GCC Runtime Library Exception along with this program;
+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+   <http://www.gnu.org/licenses/>.  */
+
+/*
+ * Dummy start/end specification to let linker work as
+ * needed by autoconf scripts using this compiler.
+ */
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC "crt0.o%s"
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC   ""
+
+/*
+ * Some targets do not set up LIB_SPECS, override it, here.
+ */
+/*
+#define STD_LIB_SPEC "%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}"
+
+#undef LIB_SPEC
+#define LIB_SPEC "%{!qrtems: " STD_LIB_SPEC "} " \
+"%{!nostdlib: %{qrtems: --start-group \
+ -lrtemsbsp -lrtemscpu \
+ -latomic -lc -lgcc --end-group %{!qnolinkcmds: -T linkcmds%s}}}"
+*/
+#define TARGET_POSIX_IO
+
+/* Prefer int for int32_t (see stdint-newlib.h).  */
+#undef STDINT_LONG32
+#define STDINT_LONG32 (INT_TYPE_SIZE != 32 && LONG_TYPE_SIZE == 32)
diff --git a/gcc/config/zephyr.opt b/gcc/config/zephyr.opt
new file mode 100644
index 000000000..3750c9b8a
--- /dev/null
+++ b/gcc/config/zephyr.opt
@@ -0,0 +1,30 @@
+; Zephyr options.
+
+; Copyright (C) 2010-2019 Free Software Foundation, Inc.
+;
+; This file is part of GCC.
+;
+; GCC is free software; you can redistribute it and/or modify it under
+; the terms of the GNU General Public License as published by the Free
+; Software Foundation; either version 3, or (at your option) any later
+; version.
+;
+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+; WARRANTY; without even the implied warranty of MERCHANTABILITY or
+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+; for more details.
+;
+; You should have received a copy of the GNU General Public License
+; along with GCC; see the file COPYING3.  If not see
+; <http://www.gnu.org/licenses/>.
+
+; See the GCC internals manual (options.texi) for a description of
+; this file's format.
+
+; Please try to keep this file in ASCII collating order.
+
+pthread
+Ignore
+
+
+; This comment is to ensure we retain the blank line above.
diff --git a/gcc/configure b/gcc/configure
index 481071b42..59e72291a 100755
--- a/gcc/configure
+++ b/gcc/configure
@@ -11860,7 +11860,7 @@ case ${enable_threads} in
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | mipssde | posix | zephyr | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff --git a/gcc/configure.ac b/gcc/configure.ac
index ce2825580..33d3448a6 100644
--- a/gcc/configure.ac
+++ b/gcc/configure.ac
@@ -1646,7 +1646,7 @@ case ${enable_threads} in
     # default
     target_thread_file='single'
     ;;
-  aix | dce | lynx | mipssde | posix | rtems | \
+  aix | dce | lynx | mipssde | posix | zephyr | rtems | \
   single | tpf | vxworks | win32)
     target_thread_file=${enable_threads}
     ;;
diff --git a/gcc/doc/gccinstall.info b/gcc/doc/gccinstall.info
index b4a516b8b..3718d19c5 100644
--- a/gcc/doc/gccinstall.info
+++ b/gcc/doc/gccinstall.info
@@ -1037,6 +1037,8 @@ option.
           VxWorks thread support.
      'win32'
           Microsoft Win32 API thread support.
+     'zephyr'
+          Zephyr thread support.
 
 '--enable-tls'
      Specify that the target supports TLS (Thread Local Storage).
diff --git a/libatomic/configure.tgt b/libatomic/configure.tgt
index ecbb7d33c..aeb74b5ee 100644
--- a/libatomic/configure.tgt
+++ b/libatomic/configure.tgt
@@ -159,6 +159,11 @@ case "${target}" in
 	config_path="rtems"
 	;;
 
+  *-*-zephyr*)
+	XCFLAGS="${configure_tgt_pre_target_cpu_XCFLAGS}"
+	config_path="zephyr"
+	;;
+
   *-*-elf*)
 	# ??? No target OS.  We could be targeting bare-metal kernel-mode,
 	# or user-mode for some custom OS.  If the target supports TAS,
diff --git a/libgcc/config.host b/libgcc/config.host
index 91abc84da..d10adddb6 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -274,6 +274,10 @@ case ${host} in
   tmake_file="$tmake_file t-rtems"
   extra_parts="crtbegin.o crtend.o"
   ;;
+*-*-zephyr*)
+  tmake_file="$tmake_file t-zephyr"
+  extra_parts="crtbegin.o crtend.o"
+  ;;
 *-*-solaris2*)
   # Unless linker support and dl_iterate_phdr are present,
   # unwind-dw2-fde-dip.c automatically falls back to unwind-dw2-fde.c.
@@ -321,6 +325,10 @@ case ${host} in
 *-*-vxworks*)
   tmake_file=t-vxworks
   ;;
+*-*-zephyr*)
+  tmake_file="$tmake_file t-zephyr"
+  extra_parts="crtbegin.o crtend.o"
+  ;;
 *-*-elf)
   extra_parts="crtbegin.o crtend.o"
   ;;
@@ -343,7 +351,7 @@ i[34567]86-*-cygwin* | x86_64-*-cygwin*)
 esac
 
 case ${host} in
-aarch64*-*-elf | aarch64*-*-rtems*)
+aarch64*-*-elf | aarch64*-*-rtems* | aarch64*-*-zephyr*)
 	extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o"
 	extra_parts="$extra_parts crtfastmath.o"
 	tmake_file="${tmake_file} ${cpu_type}/t-aarch64"
@@ -458,11 +466,11 @@ arm*-*-phoenix*)
 	extra_parts="crtbegin.o crtend.o crti.o crtn.o"
 	unwind_header=config/arm/unwind-arm.h
 	;;
-arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems*)
+arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-zephyr*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-elf t-fixedpoint-gnu-prefix"
 	tm_file="$tm_file arm/bpabi-lib.h"
 	case ${host} in
-	arm*-*-eabi* | arm*-*-rtems*)
+	arm*-*-eabi* | arm*-*-rtems* | arm*-*-zephyr*)
 	  tmake_file="${tmake_file} arm/t-bpabi t-crtfm"
 	  extra_parts="crtbegin.o crtend.o crti.o crtn.o"
 	  ;;
@@ -632,10 +640,10 @@ i[34567]86-*-elfiamcu)
 i[34567]86-*-elf*)
 	tmake_file="$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic"
 	;;
-x86_64-*-elf* | x86_64-*-rtems*)
+x86_64-*-elf* | x86_64-*-rtems* | x86_64-*-zephyr*)
 	tmake_file="$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic"
 	case ${host} in
-	  x86_64-*-rtems*)
+	  x86_64-*-rtems* | | x86_64-*-zephyr*)
 	    extra_parts="$extra_parts crti.o crtn.o"
 	    ;;
 	esac
@@ -703,6 +711,10 @@ i[34567]86-*-rtems*)
 	tmake_file="$tmake_file i386/t-crtstuff t-softfp-sfdftf i386/32/t-softfp i386/t-softfp t-softfp"
 	extra_parts="$extra_parts crti.o crtn.o"
 	;;
+i[34567]86-*-zephyr*)
+	tmake_file="$tmake_file i386/t-crtstuff t-softfp-sfdftf i386/32/t-softfp i386/t-softfp t-softfp"
+	extra_parts="$extra_parts crti.o crtn.o"
+	;;
 i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)
 	tmake_file="$tmake_file i386/t-crtpc t-crtfm i386/t-msabi"
 	extra_parts="$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o"
@@ -1445,7 +1457,7 @@ i[34567]86-*-linux* | x86_64-*-linux* | \
 esac
 
 case ${host} in
-i[34567]86-*-elfiamcu | i[34567]86-*-rtems*)
+i[34567]86-*-elfiamcu | i[34567]86-*-rtems* | i[34567]86-*-zephyr*)
 	# These use soft-fp for SFmode and DFmode, not just TFmode.
 	;;
 i[34567]86-*-* | x86_64-*-*)
diff --git a/libgcc/config/gthr-zephyr.h b/libgcc/config/gthr-zephyr.h
new file mode 100644
index 000000000..bfd4da19e
--- /dev/null
+++ b/libgcc/config/gthr-zephyr.h
@@ -0,0 +1,246 @@
+/* Zephyr threads compatibility routines for libgcc2 and libobjc. */
+/* Compile this one with gcc.  */
+/* Copyright (C) 1997-2019 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify it under
+the terms of the GNU General Public License as published by the Free
+Software Foundation; either version 3, or (at your option) any later
+version.
+
+GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+Under Section 7 of GPL version 3, you are granted additional
+permissions described in the GCC Runtime Library Exception, version
+3.1, as published by the Free Software Foundation.
+
+You should have received a copy of the GNU General Public License and
+a copy of the GCC Runtime Library Exception along with this program;
+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+<http://www.gnu.org/licenses/>.  */
+
+#ifndef GCC_GTHR_ZEPHYR_H
+#define GCC_GTHR_ZEPHYR_H
+
+#include <sys/lock.h>
+#include <pthread.h>
+#include <sched.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define __GTHREADS 1
+#define __GTHREADS_CXX0X 1
+#define __GTHREAD_HAS_COND 1
+
+typedef pthread_t __gthread_t;
+typedef pthread_key_t __gthread_key_t;
+typedef pthread_once_t __gthread_once_t;
+typedef struct _Mutex_Control __gthread_mutex_t;
+typedef struct _Mutex_recursive_Control __gthread_recursive_mutex_t;
+typedef struct _Condition_Control __gthread_cond_t;
+typedef struct timespec __gthread_time_t;
+
+#define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT
+#define __GTHREAD_MUTEX_INIT _MUTEX_INITIALIZER
+#define __GTHREAD_MUTEX_INIT_FUNCTION _Mutex_Initialize
+#define __GTHREAD_RECURSIVE_MUTEX_INIT _MUTEX_RECURSIVE_INITIALIZER
+#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION _Mutex_recursive_Initialize
+#define __GTHREAD_COND_INIT _CONDITION_INITIALIZER
+#define __GTHREAD_COND_INIT_FUNCTION _Condition_Initialize
+#define __GTHREAD_TIME_INIT {0, 0}
+
+static inline int
+__gthread_active_p (void)
+{
+  return 1;
+}
+
+static inline int
+__gthread_create (__gthread_t *__threadid, void *(*__func) (void *),
+		  void *__args)
+{
+  return pthread_create (__threadid, NULL, __func, __args);
+}
+
+static inline int
+__gthread_join (__gthread_t __threadid, void **__value_ptr)
+{
+  return pthread_join (__threadid, __value_ptr);
+}
+
+static inline int
+__gthread_detach (__gthread_t __threadid)
+{
+  return pthread_detach (__threadid);
+}
+
+static inline int
+__gthread_equal (__gthread_t __t1, __gthread_t __t2)
+{
+  return pthread_equal (__t1, __t2);
+}
+
+static inline __gthread_t
+__gthread_self (void)
+{
+  return pthread_self ();
+}
+
+static inline int
+__gthread_yield (void)
+{
+  return sched_yield ();
+}
+
+static inline int
+__gthread_once (__gthread_once_t *__once, void (*__func) (void))
+{
+   return pthread_once (__once, __func);
+}
+
+static inline int
+__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
+{
+  return pthread_key_create (__key, __dtor);
+}
+
+static inline int
+__gthread_key_delete (__gthread_key_t __key)
+{
+  return pthread_key_delete (__key);
+}
+
+static inline void *
+__gthread_getspecific (__gthread_key_t __key)
+{
+  return pthread_getspecific (__key);
+}
+
+static inline int
+__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
+{
+  return pthread_setspecific (__key, __ptr);
+}
+
+static inline int
+__gthread_mutex_lock (__gthread_mutex_t *__mutex)
+{
+  _Mutex_Acquire (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
+{
+  return _Mutex_Try_acquire (__mutex);
+}
+
+static inline int
+__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
+			   const __gthread_time_t *__abs_timeout)
+{
+  return _Mutex_Acquire_timed (__mutex, __abs_timeout);
+}
+
+static inline int
+__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
+{
+  _Mutex_Release (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
+{
+  _Mutex_Destroy (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
+{
+  _Mutex_recursive_Acquire (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
+{
+  return _Mutex_recursive_Try_acquire (__mutex);
+}
+
+static inline int
+__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
+				     const __gthread_time_t *__abs_timeout)
+{
+  return _Mutex_recursive_Acquire_timed (__mutex, __abs_timeout);
+}
+
+static inline int
+__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
+{
+  _Mutex_recursive_Release (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
+{
+  _Mutex_recursive_Destroy (__mutex);
+  return 0;
+}
+
+static inline int
+__gthread_cond_broadcast (__gthread_cond_t *__cond)
+{
+  _Condition_Broadcast (__cond);
+  return 0;
+}
+
+static inline int
+__gthread_cond_signal (__gthread_cond_t *__cond)
+{
+  _Condition_Signal (__cond);
+  return 0;
+}
+
+static inline int
+__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
+{
+  _Condition_Wait (__cond, __mutex);
+  return 0;
+}
+
+static inline int
+__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
+			  const __gthread_time_t *__abs_timeout)
+{
+  return _Condition_Wait_timed (__cond, __mutex, __abs_timeout);
+}
+
+static inline int
+__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
+			       __gthread_recursive_mutex_t *__mutex)
+{
+  _Condition_Wait_recursive (__cond, __mutex);
+  return 0;
+}
+
+static inline int
+__gthread_cond_destroy (__gthread_cond_t *__cond)
+{
+  _Condition_Destroy (__cond);
+  return 0;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* ! GCC_GTHR_ZEPHYR_H */
diff --git a/libgcc/config/t-zephyr b/libgcc/config/t-zephyr
new file mode 100644
index 000000000..85f1da90d
--- /dev/null
+++ b/libgcc/config/t-zephyr
@@ -0,0 +1,4 @@
+# If we are building next to newlib, this will let us find the RTEMS
+# limits.h when building libgcc2.  Otherwise, newlib must be installed
+# first.
+LIBGCC2_INCLUDES = -I$(srcdir)/../newlib/libc/sys/rtems/include
diff --git a/libgcc/configure b/libgcc/configure
index 36dbbc1f6..95948123f 100644
--- a/libgcc/configure
+++ b/libgcc/configure
@@ -5550,6 +5550,7 @@ case $target_thread_file in
     tpf)	thread_header=config/s390/gthr-tpf.h ;;
     vxworks)	thread_header=config/gthr-vxworks.h ;;
     win32)	thread_header=config/i386/gthr-win32.h ;;
+    zephyr)	thread_header=config/gthr-zephyr.h ;;
 esac
 
 
diff --git a/libstdc++-v3/acinclude.m4 b/libstdc++-v3/acinclude.m4
index 0112d645a..36a8cf6d7 100644
--- a/libstdc++-v3/acinclude.m4
+++ b/libstdc++-v3/acinclude.m4
@@ -4367,6 +4367,9 @@ AC_DEFUN([GLIBCXX_ENABLE_FILESYSTEM_TS], [
       rtems*)
         enable_libstdcxx_filesystem_ts=yes
         ;;
+      zephyr*)
+        enable_libstdcxx_filesystem_ts=yes
+        ;;
       solaris*)
         enable_libstdcxx_filesystem_ts=yes
         ;;
diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure
index 5acf79cba..273d460a5 100755
--- a/libstdc++-v3/configure
+++ b/libstdc++-v3/configure
@@ -15426,6 +15426,7 @@ case $target_thread_file in
     tpf)	thread_header=config/s390/gthr-tpf.h ;;
     vxworks)	thread_header=config/gthr-vxworks.h ;;
     win32)	thread_header=config/i386/gthr-win32.h ;;
+    zephyr)	thread_header=config/gthr-zephyr.h ;;
 esac
 
 
@@ -78612,6 +78613,48 @@ done
 
     $as_echo "#define HAVE_TANHF 1" >>confdefs.h
 
+    ;;
+    *-zephyr)
+    $as_echo "#define HAVE_ACOSF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_ASINF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_ATAN2F 1" >>confdefs.h
+
+    $as_echo "#define HAVE_ATANF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_CEILF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_COSF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_COSHF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_EXPF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_FABSF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_FLOORF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_FMODF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_HYPOT 1" >>confdefs.h
+
+    $as_echo "#define HAVE_LOG10F 1" >>confdefs.h
+
+    $as_echo "#define HAVE_LOGF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_POWF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_SINF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_SINHF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_SQRTF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_TANF 1" >>confdefs.h
+
+    $as_echo "#define HAVE_TANHF 1" >>confdefs.h
+
     ;;
   *)
     as_fn_error $? "No support for this host/target combination." "$LINENO" 5
@@ -80363,6 +80406,9 @@ $as_echo_n "checking whether to build Filesystem TS support... " >&6; }
       solaris*)
         enable_libstdcxx_filesystem_ts=yes
         ;;
+      zephyr*)
+        enable_libstdcxx_filesystem_ts=yes
+        ;;
       *)
         enable_libstdcxx_filesystem_ts=no
         ;;
diff --git a/libstdc++-v3/configure.host b/libstdc++-v3/configure.host
index f2ff1295d..a464d0f6e 100644
--- a/libstdc++-v3/configure.host
+++ b/libstdc++-v3/configure.host
@@ -303,6 +303,10 @@ case "${host_os}" in
     # Use libatomic if necessary and avoid libstdc++ specific atomicity support
     atomicity_dir="cpu/generic/atomicity_builtins"
     ;;
+  zephyr*)
+    # Use libatomic if necessary and avoid libstdc++ specific atomicity support
+    atomicity_dir="cpu/generic/atomicity_builtins"
+    ;;
   solaris2)
     # This too-vague configuration does not provide enough information
     # to select a ctype include, and thus os_include_dir is a crap shoot.
diff --git a/libstdc++-v3/crossconfig.m4 b/libstdc++-v3/crossconfig.m4
index 344eec09d..f103a5ec3 100644
--- a/libstdc++-v3/crossconfig.m4
+++ b/libstdc++-v3/crossconfig.m4
@@ -300,6 +300,28 @@ case "${host}" in
     AC_DEFINE(HAVE_TANF)
     AC_DEFINE(HAVE_TANHF)
     ;;
+  *-zephyr)
+    AC_DEFINE(HAVE_ACOSF)
+    AC_DEFINE(HAVE_ASINF)
+    AC_DEFINE(HAVE_ATAN2F)
+    AC_DEFINE(HAVE_ATANF)
+    AC_DEFINE(HAVE_CEILF)
+    AC_DEFINE(HAVE_COSF)
+    AC_DEFINE(HAVE_COSHF)
+    AC_DEFINE(HAVE_EXPF)
+    AC_DEFINE(HAVE_FABSF)
+    AC_DEFINE(HAVE_FLOORF)
+    AC_DEFINE(HAVE_FMODF)
+    AC_DEFINE(HAVE_HYPOT)
+    AC_DEFINE(HAVE_LOG10F)
+    AC_DEFINE(HAVE_LOGF)
+    AC_DEFINE(HAVE_POWF)
+    AC_DEFINE(HAVE_SINF)
+    AC_DEFINE(HAVE_SINHF)
+    AC_DEFINE(HAVE_SQRTF)
+    AC_DEFINE(HAVE_TANF)
+    AC_DEFINE(HAVE_TANHF)
+    ;;
   *)
     AC_MSG_ERROR([No support for this host/target combination.])
    ;;
-- 
2.17.1

